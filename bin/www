#!/usr/bin/env node

Object.defineProperty(global, '__stack', {
get: function() {
        var orig = Error.prepareStackTrace;
        Error.prepareStackTrace = function(_, stack) {
            return stack;
        };
        var err = new Error;
        Error.captureStackTrace(err, arguments.callee);
        var stack = err.stack;
        Error.prepareStackTrace = orig;
        return stack;
    }
});

Object.defineProperty(global, '__line', {
get: function() {
        return __stack[1].getLineNumber();
    }
});

Object.defineProperty(global, '__function', {
get: function() {
        return __stack[1].getFunctionName();
    }
});

Object.defineProperty(global, '__file', {
get: function() {
        return __stack[1].getFileName();
    }
});

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('audiostreaming:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = require('socket.io').listen(server,
  {
    'connect timeout': 1000,
    'pingTimeout': 3000,
    'pingInterval': 3000,
    // 'reconnect': true,
    // 'reconnection delay': 300,
    // 'max reconnection attempts': 10000,
    // 'force new connection':true
  });

// var svrio = require('../private/svrio');
var ss = require('socket.io-stream');
var path = require('path');
var fs = require('fs');

const util = require('util');

var room_address = [];
var list_address = {};
var data2address = {};
var accel2address = {};

io.sockets.on('connection', function(socket) {
  // if(socket.conn.transport.socket)
  //   console.log(`${__file} [${__line}] connection: ${socket.conn.transport.socket._socket.remoteAddress} : ${socket.conn.transport.socket._socket.remotePort}`);
  // else if(socket.request.connection)
  //   console.log(`${__file} [${__line}] connection: ${socket.request.connection.remoteAddress} : ${socket.request.connection.remotePort}`);
  // else
  //   console.log(`${__file} [${__line}] connection...`);

  // var prod_soc;
  // var prod_stream;
  // var state = 0;
  // var cons_soc; 
  // var cons_stream;

  socket.on('register', (data)=>{
    if(socket.conn.transport.socket)
      address = socket.conn.transport.socket._socket.remoteAddress;
    else if(socket.request.connection)
      address =  socket.request.connection.remoteAddress;

    var room_idx = room_address.indexOf(address);
    if(room_idx == -1){
      room_idx = room_address.length;
      room_address.push(address);
    }

    list_address[address] = {};
    list_address[address]['info'] = data;
    list_address[address]['data_id'] = undefined;
    list_address[address]['accel_id'] = undefined;
    console.log(data);
  })
  .on('watch', (data)=>{
    if(socket.conn.transport.socket)
      address = socket.conn.transport.socket._socket.remoteAddress;
    else if(socket.request.connection)
      address =  socket.request.connection.remoteAddress;
    socket.join(data);
    console.log(address + ' watch room ' + data);
  })
  .on('get_device', (data)=>{
    result = []
    for(var i = 0; i < room_address.length; i++){
      address = room_address[i];
      tmp = {};
      tmp['room'] = i;
      tmp['username'] = list_address[address]['info']['username'];
      tmp['name'] = list_address[address]['info']['name'];
      tmp['address'] = address;
      result.push(tmp);
    }
    socket.emit('return_device', result);
  })
  .on('bcdata', (data) => {
    if(socket.conn.transport.socket)
      address = socket.conn.transport.socket._socket.remoteAddress;
    else if(socket.request.connection)
      address =  socket.request.connection.remoteAddress;
    var idx = room_address.indexOf(address);
    if(idx != -1){
      if(list_address[address]['data_id'] == undefined){
        list_address[address]['data_id'] = socket.id;
        data2address[socket.id] = address;
        // console.log(`${__file} [${__line}]`);
        console.log(address + ' data - ' + socket.id + ' - ONLINE');
      }
      if(list_address[address]['data_id'] == socket.id){
        socket.broadcast.to(idx).emit('data', data);
      }
    }
  })
  .on('bcaccel', (data) => {
    if(socket.conn.transport.socket)
      address = socket.conn.transport.socket._socket.remoteAddress;
    else if(socket.request.connection)
      address =  socket.request.connection.remoteAddress;
    var idx = room_address.indexOf(address);
    if(idx != -1){
      if(list_address[address]['accel_id'] == undefined){
        list_address[address]['accel_id'] = socket.id;
        accel2address[socket.id] = address;
        // console.log(`${__file} [${__line}]`);
        console.log(address + ' accel - ' + socket.id + ' - ONLINE');
      }
      if(list_address[address]['accel_id'] == socket.id){
        socket.broadcast.to(idx).emit('accel', data);
      }
    }
  })
  .on('bcend', () => {
    // console.log(`${__file} [${__line}] bcend`);
    if(socket.conn.transport.socket)
      address = socket.conn.transport.socket._socket.remoteAddress;
    else if(socket.request.connection)
      address =  socket.request.connection.remoteAddress;
    var idx = room_address.indexOf(address);
    if(idx != -1){
      socket.broadcast.to(idx).emit('data', data);
    }
  })
  .on('disconnect', () => {
    // console.log(`${__file} [${__line}] disconnect`);
    if(data2address[socket.id] != undefined){
      address = data2address[socket.id];
      list_address[address]['data_id'] = undefined;
      console.log(address + ' data - ' + socket.id + ' - OFFLINE');
    }
    if(accel2address[socket.id] != undefined){
      address = accel2address[socket.id];
      list_address[address]['accel_id'] = undefined;
      console.log(address + ' accel - ' + socket.id + ' - OFFLINE');
    }
  })
  .on('timeout', () => {
    // console.log(`${__file} [${__line}] timeout`);
  });


});
